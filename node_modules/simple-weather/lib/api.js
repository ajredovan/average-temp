"use strict";

var superagent = require("superagent"),
    Promise = require("bluebird"),
    _ = require("lodash"),
    qs = require('qs'),
    config = require("../config")();

module.exports = {
    request: request
};

/*
 * Ajax request wrapper for communicating with Open Weather API
 *
 * @param args {Object}
 *      method {String} REQUIRED - string request method: GET, PUT, POST
 *      url    {String} REQUIRED - api url to hit
 *      query  {Object} OPTIONAL - url query parameters
 *      data   {Object} OPTIONAL - request payload
 *
 *
 * @return {Promise}
 *
 */
function request(args) {
    return new Promise(function (resolve, reject) {
        var req = superagent[args.method.toLowerCase()](args.url);

        args.query = _.extend({
            APPID: config.apiKey,
            units: config.units,
            mode: config.mode
        }, args.query || {});

        req.query(args.query);

        if (args.data) {
            req.send(args.data);
        }

        if (config.debug === true) {
            var queryString = qs.parse(_.clone(req.qs));
            delete queryString.APPID; // remove api key from logging
            queryString = qs.stringify(queryString, {arrayFormat: 'repeat'});
            console.log("[" + req.method + "]: " + req.url + '?' + queryString);
        }

        req.end(function (error, response) {
            if (response && response.ok) {
                if (response.body.cod) {
                    if (response.body.cod === 200) {
                        return resolve(_formatResponse(response, config.mode));
                    } else {
                        return reject(new Error(error || response.body.message));
                    }
                } else {
                    return resolve(_formatResponse(response, config.mode));
                }
            } else {
                return reject(new Error(error || response.body.message));
            }
        });
    });
}

/*
 * Private API
 */

function _formatResponse(response, mode) {
    mode = mode || "json"; // default to json

    if (mode === "json") {
        return response.body;
    } else if (mode === "xml") {
        return response.text;
    } else if (mode === "html") {
        return response.text;
    } else {
        throw Error("Invalid response mode:", mode)
    }
}